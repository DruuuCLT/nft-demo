/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MessageV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "INIT"
      | "PAUSED_UNTIL"
      | "WATCHERS"
      | "WATCHER_STATUS"
      | "accountant"
      | "addWatcher"
      | "bridgeATeam"
      | "bridgeEnabled"
      | "bridgeOperators"
      | "bridgeSupers"
      | "chain"
      | "chainsig"
      | "customSourceFee"
      | "enabledChains"
      | "expressFee"
      | "exsig"
      | "failedTransfers"
      | "feeToken"
      | "feeTokenDecimals"
      | "getSourceFee"
      | "init"
      | "maxgas"
      | "minFee"
      | "minTokenForChain"
      | "nextTxId"
      | "owner"
      | "paper"
      | "paused"
      | "process"
      | "processCall"
      | "processedTransfers"
      | "recover"
      | "removeWatcher"
      | "renounceOwnership"
      | "securityPause"
      | "securityUnpause"
      | "sendMessage"
      | "sendRequest"
      | "sendRequestExpress"
      | "setATeam"
      | "setAccountant"
      | "setBridgeStatus"
      | "setChainStatus"
      | "setChainsig"
      | "setCustomSourceFee"
      | "setExsig"
      | "setFeeToken"
      | "setMaxgas"
      | "setMinFee"
      | "setOperator"
      | "setSuper"
      | "setTakeFeesOffline"
      | "setWhitelist"
      | "setWhitelistOnly"
      | "takeFeesOffline"
      | "transferOwnership"
      | "weth"
      | "whitelist"
      | "whitelistOnly"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddWatcher"
      | "ErrorLog"
      | "OwnershipTransferred"
      | "Paused"
      | "Recover"
      | "RemoveWatcher"
      | "SecurityPause"
      | "SecurityUnpause"
      | "SendProcessed"
      | "SendRequested"
      | "SetATeam"
      | "SetAccountant"
      | "SetBridgeStatus"
      | "SetChainStatus"
      | "SetChainsig"
      | "SetCustomSourceFee"
      | "SetExsig"
      | "SetFeeToken"
      | "SetMaxgas"
      | "SetMinFee"
      | "SetOperator"
      | "SetSuper"
      | "SetTakeFeesOffline"
      | "SetWhitelist"
      | "SetWhitelistOnly"
      | "Success"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "INIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PAUSED_UNTIL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WATCHERS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "WATCHER_STATUS",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "accountant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addWatcher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeATeam",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeOperators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeSupers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "chain", values?: undefined): string;
  encodeFunctionData(functionFragment: "chainsig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "customSourceFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enabledChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expressFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exsig", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "failedTransfers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSourceFee",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "maxgas", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "minFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minTokenForChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nextTxId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paper", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "process",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      [BytesLike, BytesLike, BytesLike]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processCall",
    values: [BigNumberish, BigNumberish, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processedTransfers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWatcher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "securityPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "securityUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequestExpress",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setATeam",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountant",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainStatus",
    values: [BigNumberish[], boolean[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainsig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomSourceFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExsig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxgas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSuper",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTakeFeesOffline",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistOnly",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "takeFeesOffline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistOnly",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "INIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PAUSED_UNTIL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WATCHERS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WATCHER_STATUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accountant", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addWatcher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeATeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeSupers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainsig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "customSourceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enabledChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expressFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exsig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "failedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSourceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxgas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minTokenForChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextTxId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "process", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "securityPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "securityUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequestExpress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setATeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccountant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainsig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomSourceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setExsig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxgas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSuper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTakeFeesOffline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeFeesOffline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistOnly",
    data: BytesLike
  ): Result;
}

export namespace AddWatcherEvent {
  export type InputTuple = [watcher: AddressLike];
  export type OutputTuple = [watcher: string];
  export interface OutputObject {
    watcher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ErrorLogEvent {
  export type InputTuple = [txId: BigNumberish, message: string];
  export type OutputTuple = [txId: bigint, message: string];
  export interface OutputObject {
    txId: bigint;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoverEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveWatcherEvent {
  export type InputTuple = [watcher: AddressLike];
  export type OutputTuple = [watcher: string];
  export interface OutputObject {
    watcher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecurityPauseEvent {
  export type InputTuple = [watcher: AddressLike, pausedUntil: BigNumberish];
  export type OutputTuple = [watcher: string, pausedUntil: bigint];
  export interface OutputObject {
    watcher: string;
    pausedUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecurityUnpauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendProcessedEvent {
  export type InputTuple = [
    txId: BigNumberish,
    sourceChainId: BigNumberish,
    sender: AddressLike,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    txId: bigint,
    sourceChainId: bigint,
    sender: string,
    recipient: string
  ];
  export interface OutputObject {
    txId: bigint;
    sourceChainId: bigint;
    sender: string;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendRequestedEvent {
  export type InputTuple = [
    txId: BigNumberish,
    sender: AddressLike,
    recipient: AddressLike,
    chain: BigNumberish,
    express: boolean,
    data: BytesLike,
    confirmations: BigNumberish
  ];
  export type OutputTuple = [
    txId: bigint,
    sender: string,
    recipient: string,
    chain: bigint,
    express: boolean,
    data: string,
    confirmations: bigint
  ];
  export interface OutputObject {
    txId: bigint;
    sender: string;
    recipient: string;
    chain: bigint;
    express: boolean;
    data: string;
    confirmations: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetATeamEvent {
  export type InputTuple = [account: AddressLike, status: boolean];
  export type OutputTuple = [account: string, status: boolean];
  export interface OutputObject {
    account: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAccountantEvent {
  export type InputTuple = [accountant: AddressLike];
  export type OutputTuple = [accountant: string];
  export interface OutputObject {
    accountant: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBridgeStatusEvent {
  export type InputTuple = [status: boolean];
  export type OutputTuple = [status: boolean];
  export interface OutputObject {
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetChainStatusEvent {
  export type InputTuple = [
    chain: BigNumberish,
    status: boolean,
    minToken: BigNumberish,
    expressFee: BigNumberish
  ];
  export type OutputTuple = [
    chain: bigint,
    status: boolean,
    minToken: bigint,
    expressFee: bigint
  ];
  export interface OutputObject {
    chain: bigint;
    status: boolean;
    minToken: bigint;
    expressFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetChainsigEvent {
  export type InputTuple = [signer: AddressLike];
  export type OutputTuple = [signer: string];
  export interface OutputObject {
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCustomSourceFeeEvent {
  export type InputTuple = [wallet: AddressLike, amount: BigNumberish];
  export type OutputTuple = [wallet: string, amount: bigint];
  export interface OutputObject {
    wallet: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetExsigEvent {
  export type InputTuple = [caller: AddressLike, signer: AddressLike];
  export type OutputTuple = [caller: string, signer: string];
  export interface OutputObject {
    caller: string;
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeTokenEvent {
  export type InputTuple = [
    feeToken: AddressLike,
    feeTokenDecimals: BigNumberish
  ];
  export type OutputTuple = [feeToken: string, feeTokenDecimals: bigint];
  export interface OutputObject {
    feeToken: string;
    feeTokenDecimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMaxgasEvent {
  export type InputTuple = [caller: AddressLike, maxGas: BigNumberish];
  export type OutputTuple = [caller: string, maxGas: bigint];
  export interface OutputObject {
    caller: string;
    maxGas: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinFeeEvent {
  export type InputTuple = [minFee: BigNumberish];
  export type OutputTuple = [minFee: bigint];
  export interface OutputObject {
    minFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOperatorEvent {
  export type InputTuple = [account: AddressLike, status: boolean];
  export type OutputTuple = [account: string, status: boolean];
  export interface OutputObject {
    account: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSuperEvent {
  export type InputTuple = [account: AddressLike, status: boolean];
  export type OutputTuple = [account: string, status: boolean];
  export interface OutputObject {
    account: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTakeFeesOfflineEvent {
  export type InputTuple = [status: boolean];
  export type OutputTuple = [status: boolean];
  export interface OutputObject {
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWhitelistEvent {
  export type InputTuple = [wallet: AddressLike, status: boolean];
  export type OutputTuple = [wallet: string, status: boolean];
  export interface OutputObject {
    wallet: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWhitelistOnlyEvent {
  export type InputTuple = [status: boolean];
  export type OutputTuple = [status: boolean];
  export interface OutputObject {
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuccessEvent {
  export type InputTuple = [
    txId: BigNumberish,
    sourceChainId: BigNumberish,
    sender: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    txId: bigint,
    sourceChainId: bigint,
    sender: string,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    txId: bigint;
    sourceChainId: bigint;
    sender: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MessageV3 extends BaseContract {
  connect(runner?: ContractRunner | null): MessageV3;
  waitForDeployment(): Promise<this>;

  interface: MessageV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  INIT: TypedContractMethod<[], [boolean], "view">;

  PAUSED_UNTIL: TypedContractMethod<[], [bigint], "view">;

  WATCHERS: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  WATCHER_STATUS: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  accountant: TypedContractMethod<[], [string], "view">;

  addWatcher: TypedContractMethod<
    [_watcher: AddressLike],
    [void],
    "nonpayable"
  >;

  bridgeATeam: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  bridgeEnabled: TypedContractMethod<[], [boolean], "view">;

  bridgeOperators: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  bridgeSupers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  chain: TypedContractMethod<[], [bigint], "view">;

  chainsig: TypedContractMethod<[], [string], "view">;

  customSourceFee: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  enabledChains: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  expressFee: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  exsig: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  failedTransfers: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  feeToken: TypedContractMethod<[], [string], "view">;

  feeTokenDecimals: TypedContractMethod<[], [bigint], "view">;

  getSourceFee: TypedContractMethod<
    [_destChainId: BigNumberish, _express: boolean],
    [bigint],
    "view"
  >;

  init: TypedContractMethod<
    [_weth: AddressLike, _feeToken: AddressLike, _accountant: AddressLike],
    [void],
    "nonpayable"
  >;

  maxgas: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  minFee: TypedContractMethod<[], [bigint], "view">;

  minTokenForChain: TypedContractMethod<
    [_destChainId: BigNumberish],
    [bigint],
    "view"
  >;

  nextTxId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paper: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  process: TypedContractMethod<
    [
      _txId: BigNumberish,
      _sourceChainId: BigNumberish,
      _destChainId: BigNumberish,
      _sender: AddressLike,
      _recipient: AddressLike,
      _gas: BigNumberish,
      _data: [BytesLike, BytesLike, BytesLike]
    ],
    [void],
    "nonpayable"
  >;

  processCall: TypedContractMethod<
    [
      _txId: BigNumberish,
      _sourceChainId: BigNumberish,
      _sender: AddressLike,
      _recipient: AddressLike,
      _data: BytesLike
    ],
    [[boolean, string] & { _reason: string }],
    "nonpayable"
  >;

  processedTransfers: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  recover: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeWatcher: TypedContractMethod<
    [_watcher: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  securityPause: TypedContractMethod<[], [void], "nonpayable">;

  securityUnpause: TypedContractMethod<[], [void], "nonpayable">;

  sendMessage: TypedContractMethod<
    [
      _recipient: AddressLike,
      _chain: BigNumberish,
      _data: BytesLike,
      _confirmations: BigNumberish,
      _express: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  sendRequest: TypedContractMethod<
    [
      _recipient: AddressLike,
      _chain: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike,
      _data: BytesLike,
      _confirmations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  sendRequestExpress: TypedContractMethod<
    [
      _recipient: AddressLike,
      _chain: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike,
      _data: BytesLike,
      _confirmations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  setATeam: TypedContractMethod<
    [_account: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  setAccountant: TypedContractMethod<
    [_accountant: AddressLike],
    [void],
    "nonpayable"
  >;

  setBridgeStatus: TypedContractMethod<
    [_status: boolean],
    [void],
    "nonpayable"
  >;

  setChainStatus: TypedContractMethod<
    [_chain: BigNumberish[], _status: boolean[], _expressFee: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setChainsig: TypedContractMethod<
    [_signer: AddressLike],
    [void],
    "nonpayable"
  >;

  setCustomSourceFee: TypedContractMethod<
    [_contract: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExsig: TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;

  setFeeToken: TypedContractMethod<
    [_feeToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxgas: TypedContractMethod<[_maxGas: BigNumberish], [void], "nonpayable">;

  setMinFee: TypedContractMethod<[_minFee: BigNumberish], [void], "nonpayable">;

  setOperator: TypedContractMethod<
    [_account: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  setSuper: TypedContractMethod<
    [_account: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  setTakeFeesOffline: TypedContractMethod<
    [_status: boolean],
    [void],
    "nonpayable"
  >;

  setWhitelist: TypedContractMethod<
    [_wallet: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  setWhitelistOnly: TypedContractMethod<
    [_status: boolean],
    [void],
    "nonpayable"
  >;

  takeFeesOffline: TypedContractMethod<[], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  weth: TypedContractMethod<[], [string], "view">;

  whitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  whitelistOnly: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "INIT"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "PAUSED_UNTIL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WATCHERS"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "WATCHER_STATUS"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "accountant"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addWatcher"
  ): TypedContractMethod<[_watcher: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "bridgeATeam"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bridgeEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "bridgeOperators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bridgeSupers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "chain"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "chainsig"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "customSourceFee"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "enabledChains"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "expressFee"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "exsig"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "failedTransfers"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "feeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeTokenDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSourceFee"
  ): TypedContractMethod<
    [_destChainId: BigNumberish, _express: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<
    [_weth: AddressLike, _feeToken: AddressLike, _accountant: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxgas"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minTokenForChain"
  ): TypedContractMethod<[_destChainId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextTxId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "process"
  ): TypedContractMethod<
    [
      _txId: BigNumberish,
      _sourceChainId: BigNumberish,
      _destChainId: BigNumberish,
      _sender: AddressLike,
      _recipient: AddressLike,
      _gas: BigNumberish,
      _data: [BytesLike, BytesLike, BytesLike]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processCall"
  ): TypedContractMethod<
    [
      _txId: BigNumberish,
      _sourceChainId: BigNumberish,
      _sender: AddressLike,
      _recipient: AddressLike,
      _data: BytesLike
    ],
    [[boolean, string] & { _reason: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processedTransfers"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "recover"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeWatcher"
  ): TypedContractMethod<[_watcher: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "securityPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "securityUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _chain: BigNumberish,
      _data: BytesLike,
      _confirmations: BigNumberish,
      _express: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendRequest"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _chain: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike,
      _data: BytesLike,
      _confirmations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendRequestExpress"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _chain: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike,
      _data: BytesLike,
      _confirmations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setATeam"
  ): TypedContractMethod<
    [_account: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAccountant"
  ): TypedContractMethod<[_accountant: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBridgeStatus"
  ): TypedContractMethod<[_status: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setChainStatus"
  ): TypedContractMethod<
    [_chain: BigNumberish[], _status: boolean[], _expressFee: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setChainsig"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCustomSourceFee"
  ): TypedContractMethod<
    [_contract: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExsig"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeToken"
  ): TypedContractMethod<[_feeToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxgas"
  ): TypedContractMethod<[_maxGas: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinFee"
  ): TypedContractMethod<[_minFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<
    [_account: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSuper"
  ): TypedContractMethod<
    [_account: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTakeFeesOffline"
  ): TypedContractMethod<[_status: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelist"
  ): TypedContractMethod<
    [_wallet: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWhitelistOnly"
  ): TypedContractMethod<[_status: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "takeFeesOffline"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelistOnly"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "AddWatcher"
  ): TypedContractEvent<
    AddWatcherEvent.InputTuple,
    AddWatcherEvent.OutputTuple,
    AddWatcherEvent.OutputObject
  >;
  getEvent(
    key: "ErrorLog"
  ): TypedContractEvent<
    ErrorLogEvent.InputTuple,
    ErrorLogEvent.OutputTuple,
    ErrorLogEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Recover"
  ): TypedContractEvent<
    RecoverEvent.InputTuple,
    RecoverEvent.OutputTuple,
    RecoverEvent.OutputObject
  >;
  getEvent(
    key: "RemoveWatcher"
  ): TypedContractEvent<
    RemoveWatcherEvent.InputTuple,
    RemoveWatcherEvent.OutputTuple,
    RemoveWatcherEvent.OutputObject
  >;
  getEvent(
    key: "SecurityPause"
  ): TypedContractEvent<
    SecurityPauseEvent.InputTuple,
    SecurityPauseEvent.OutputTuple,
    SecurityPauseEvent.OutputObject
  >;
  getEvent(
    key: "SecurityUnpause"
  ): TypedContractEvent<
    SecurityUnpauseEvent.InputTuple,
    SecurityUnpauseEvent.OutputTuple,
    SecurityUnpauseEvent.OutputObject
  >;
  getEvent(
    key: "SendProcessed"
  ): TypedContractEvent<
    SendProcessedEvent.InputTuple,
    SendProcessedEvent.OutputTuple,
    SendProcessedEvent.OutputObject
  >;
  getEvent(
    key: "SendRequested"
  ): TypedContractEvent<
    SendRequestedEvent.InputTuple,
    SendRequestedEvent.OutputTuple,
    SendRequestedEvent.OutputObject
  >;
  getEvent(
    key: "SetATeam"
  ): TypedContractEvent<
    SetATeamEvent.InputTuple,
    SetATeamEvent.OutputTuple,
    SetATeamEvent.OutputObject
  >;
  getEvent(
    key: "SetAccountant"
  ): TypedContractEvent<
    SetAccountantEvent.InputTuple,
    SetAccountantEvent.OutputTuple,
    SetAccountantEvent.OutputObject
  >;
  getEvent(
    key: "SetBridgeStatus"
  ): TypedContractEvent<
    SetBridgeStatusEvent.InputTuple,
    SetBridgeStatusEvent.OutputTuple,
    SetBridgeStatusEvent.OutputObject
  >;
  getEvent(
    key: "SetChainStatus"
  ): TypedContractEvent<
    SetChainStatusEvent.InputTuple,
    SetChainStatusEvent.OutputTuple,
    SetChainStatusEvent.OutputObject
  >;
  getEvent(
    key: "SetChainsig"
  ): TypedContractEvent<
    SetChainsigEvent.InputTuple,
    SetChainsigEvent.OutputTuple,
    SetChainsigEvent.OutputObject
  >;
  getEvent(
    key: "SetCustomSourceFee"
  ): TypedContractEvent<
    SetCustomSourceFeeEvent.InputTuple,
    SetCustomSourceFeeEvent.OutputTuple,
    SetCustomSourceFeeEvent.OutputObject
  >;
  getEvent(
    key: "SetExsig"
  ): TypedContractEvent<
    SetExsigEvent.InputTuple,
    SetExsigEvent.OutputTuple,
    SetExsigEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeToken"
  ): TypedContractEvent<
    SetFeeTokenEvent.InputTuple,
    SetFeeTokenEvent.OutputTuple,
    SetFeeTokenEvent.OutputObject
  >;
  getEvent(
    key: "SetMaxgas"
  ): TypedContractEvent<
    SetMaxgasEvent.InputTuple,
    SetMaxgasEvent.OutputTuple,
    SetMaxgasEvent.OutputObject
  >;
  getEvent(
    key: "SetMinFee"
  ): TypedContractEvent<
    SetMinFeeEvent.InputTuple,
    SetMinFeeEvent.OutputTuple,
    SetMinFeeEvent.OutputObject
  >;
  getEvent(
    key: "SetOperator"
  ): TypedContractEvent<
    SetOperatorEvent.InputTuple,
    SetOperatorEvent.OutputTuple,
    SetOperatorEvent.OutputObject
  >;
  getEvent(
    key: "SetSuper"
  ): TypedContractEvent<
    SetSuperEvent.InputTuple,
    SetSuperEvent.OutputTuple,
    SetSuperEvent.OutputObject
  >;
  getEvent(
    key: "SetTakeFeesOffline"
  ): TypedContractEvent<
    SetTakeFeesOfflineEvent.InputTuple,
    SetTakeFeesOfflineEvent.OutputTuple,
    SetTakeFeesOfflineEvent.OutputObject
  >;
  getEvent(
    key: "SetWhitelist"
  ): TypedContractEvent<
    SetWhitelistEvent.InputTuple,
    SetWhitelistEvent.OutputTuple,
    SetWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "SetWhitelistOnly"
  ): TypedContractEvent<
    SetWhitelistOnlyEvent.InputTuple,
    SetWhitelistOnlyEvent.OutputTuple,
    SetWhitelistOnlyEvent.OutputObject
  >;
  getEvent(
    key: "Success"
  ): TypedContractEvent<
    SuccessEvent.InputTuple,
    SuccessEvent.OutputTuple,
    SuccessEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AddWatcher(address)": TypedContractEvent<
      AddWatcherEvent.InputTuple,
      AddWatcherEvent.OutputTuple,
      AddWatcherEvent.OutputObject
    >;
    AddWatcher: TypedContractEvent<
      AddWatcherEvent.InputTuple,
      AddWatcherEvent.OutputTuple,
      AddWatcherEvent.OutputObject
    >;

    "ErrorLog(uint256,string)": TypedContractEvent<
      ErrorLogEvent.InputTuple,
      ErrorLogEvent.OutputTuple,
      ErrorLogEvent.OutputObject
    >;
    ErrorLog: TypedContractEvent<
      ErrorLogEvent.InputTuple,
      ErrorLogEvent.OutputTuple,
      ErrorLogEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Recover(address,uint256)": TypedContractEvent<
      RecoverEvent.InputTuple,
      RecoverEvent.OutputTuple,
      RecoverEvent.OutputObject
    >;
    Recover: TypedContractEvent<
      RecoverEvent.InputTuple,
      RecoverEvent.OutputTuple,
      RecoverEvent.OutputObject
    >;

    "RemoveWatcher(address)": TypedContractEvent<
      RemoveWatcherEvent.InputTuple,
      RemoveWatcherEvent.OutputTuple,
      RemoveWatcherEvent.OutputObject
    >;
    RemoveWatcher: TypedContractEvent<
      RemoveWatcherEvent.InputTuple,
      RemoveWatcherEvent.OutputTuple,
      RemoveWatcherEvent.OutputObject
    >;

    "SecurityPause(address,uint256)": TypedContractEvent<
      SecurityPauseEvent.InputTuple,
      SecurityPauseEvent.OutputTuple,
      SecurityPauseEvent.OutputObject
    >;
    SecurityPause: TypedContractEvent<
      SecurityPauseEvent.InputTuple,
      SecurityPauseEvent.OutputTuple,
      SecurityPauseEvent.OutputObject
    >;

    "SecurityUnpause()": TypedContractEvent<
      SecurityUnpauseEvent.InputTuple,
      SecurityUnpauseEvent.OutputTuple,
      SecurityUnpauseEvent.OutputObject
    >;
    SecurityUnpause: TypedContractEvent<
      SecurityUnpauseEvent.InputTuple,
      SecurityUnpauseEvent.OutputTuple,
      SecurityUnpauseEvent.OutputObject
    >;

    "SendProcessed(uint256,uint256,address,address)": TypedContractEvent<
      SendProcessedEvent.InputTuple,
      SendProcessedEvent.OutputTuple,
      SendProcessedEvent.OutputObject
    >;
    SendProcessed: TypedContractEvent<
      SendProcessedEvent.InputTuple,
      SendProcessedEvent.OutputTuple,
      SendProcessedEvent.OutputObject
    >;

    "SendRequested(uint256,address,address,uint256,bool,bytes,uint16)": TypedContractEvent<
      SendRequestedEvent.InputTuple,
      SendRequestedEvent.OutputTuple,
      SendRequestedEvent.OutputObject
    >;
    SendRequested: TypedContractEvent<
      SendRequestedEvent.InputTuple,
      SendRequestedEvent.OutputTuple,
      SendRequestedEvent.OutputObject
    >;

    "SetATeam(address,bool)": TypedContractEvent<
      SetATeamEvent.InputTuple,
      SetATeamEvent.OutputTuple,
      SetATeamEvent.OutputObject
    >;
    SetATeam: TypedContractEvent<
      SetATeamEvent.InputTuple,
      SetATeamEvent.OutputTuple,
      SetATeamEvent.OutputObject
    >;

    "SetAccountant(address)": TypedContractEvent<
      SetAccountantEvent.InputTuple,
      SetAccountantEvent.OutputTuple,
      SetAccountantEvent.OutputObject
    >;
    SetAccountant: TypedContractEvent<
      SetAccountantEvent.InputTuple,
      SetAccountantEvent.OutputTuple,
      SetAccountantEvent.OutputObject
    >;

    "SetBridgeStatus(bool)": TypedContractEvent<
      SetBridgeStatusEvent.InputTuple,
      SetBridgeStatusEvent.OutputTuple,
      SetBridgeStatusEvent.OutputObject
    >;
    SetBridgeStatus: TypedContractEvent<
      SetBridgeStatusEvent.InputTuple,
      SetBridgeStatusEvent.OutputTuple,
      SetBridgeStatusEvent.OutputObject
    >;

    "SetChainStatus(uint256,bool,uint256,uint256)": TypedContractEvent<
      SetChainStatusEvent.InputTuple,
      SetChainStatusEvent.OutputTuple,
      SetChainStatusEvent.OutputObject
    >;
    SetChainStatus: TypedContractEvent<
      SetChainStatusEvent.InputTuple,
      SetChainStatusEvent.OutputTuple,
      SetChainStatusEvent.OutputObject
    >;

    "SetChainsig(address)": TypedContractEvent<
      SetChainsigEvent.InputTuple,
      SetChainsigEvent.OutputTuple,
      SetChainsigEvent.OutputObject
    >;
    SetChainsig: TypedContractEvent<
      SetChainsigEvent.InputTuple,
      SetChainsigEvent.OutputTuple,
      SetChainsigEvent.OutputObject
    >;

    "SetCustomSourceFee(address,uint256)": TypedContractEvent<
      SetCustomSourceFeeEvent.InputTuple,
      SetCustomSourceFeeEvent.OutputTuple,
      SetCustomSourceFeeEvent.OutputObject
    >;
    SetCustomSourceFee: TypedContractEvent<
      SetCustomSourceFeeEvent.InputTuple,
      SetCustomSourceFeeEvent.OutputTuple,
      SetCustomSourceFeeEvent.OutputObject
    >;

    "SetExsig(address,address)": TypedContractEvent<
      SetExsigEvent.InputTuple,
      SetExsigEvent.OutputTuple,
      SetExsigEvent.OutputObject
    >;
    SetExsig: TypedContractEvent<
      SetExsigEvent.InputTuple,
      SetExsigEvent.OutputTuple,
      SetExsigEvent.OutputObject
    >;

    "SetFeeToken(address,uint256)": TypedContractEvent<
      SetFeeTokenEvent.InputTuple,
      SetFeeTokenEvent.OutputTuple,
      SetFeeTokenEvent.OutputObject
    >;
    SetFeeToken: TypedContractEvent<
      SetFeeTokenEvent.InputTuple,
      SetFeeTokenEvent.OutputTuple,
      SetFeeTokenEvent.OutputObject
    >;

    "SetMaxgas(address,uint256)": TypedContractEvent<
      SetMaxgasEvent.InputTuple,
      SetMaxgasEvent.OutputTuple,
      SetMaxgasEvent.OutputObject
    >;
    SetMaxgas: TypedContractEvent<
      SetMaxgasEvent.InputTuple,
      SetMaxgasEvent.OutputTuple,
      SetMaxgasEvent.OutputObject
    >;

    "SetMinFee(uint256)": TypedContractEvent<
      SetMinFeeEvent.InputTuple,
      SetMinFeeEvent.OutputTuple,
      SetMinFeeEvent.OutputObject
    >;
    SetMinFee: TypedContractEvent<
      SetMinFeeEvent.InputTuple,
      SetMinFeeEvent.OutputTuple,
      SetMinFeeEvent.OutputObject
    >;

    "SetOperator(address,bool)": TypedContractEvent<
      SetOperatorEvent.InputTuple,
      SetOperatorEvent.OutputTuple,
      SetOperatorEvent.OutputObject
    >;
    SetOperator: TypedContractEvent<
      SetOperatorEvent.InputTuple,
      SetOperatorEvent.OutputTuple,
      SetOperatorEvent.OutputObject
    >;

    "SetSuper(address,bool)": TypedContractEvent<
      SetSuperEvent.InputTuple,
      SetSuperEvent.OutputTuple,
      SetSuperEvent.OutputObject
    >;
    SetSuper: TypedContractEvent<
      SetSuperEvent.InputTuple,
      SetSuperEvent.OutputTuple,
      SetSuperEvent.OutputObject
    >;

    "SetTakeFeesOffline(bool)": TypedContractEvent<
      SetTakeFeesOfflineEvent.InputTuple,
      SetTakeFeesOfflineEvent.OutputTuple,
      SetTakeFeesOfflineEvent.OutputObject
    >;
    SetTakeFeesOffline: TypedContractEvent<
      SetTakeFeesOfflineEvent.InputTuple,
      SetTakeFeesOfflineEvent.OutputTuple,
      SetTakeFeesOfflineEvent.OutputObject
    >;

    "SetWhitelist(address,bool)": TypedContractEvent<
      SetWhitelistEvent.InputTuple,
      SetWhitelistEvent.OutputTuple,
      SetWhitelistEvent.OutputObject
    >;
    SetWhitelist: TypedContractEvent<
      SetWhitelistEvent.InputTuple,
      SetWhitelistEvent.OutputTuple,
      SetWhitelistEvent.OutputObject
    >;

    "SetWhitelistOnly(bool)": TypedContractEvent<
      SetWhitelistOnlyEvent.InputTuple,
      SetWhitelistOnlyEvent.OutputTuple,
      SetWhitelistOnlyEvent.OutputObject
    >;
    SetWhitelistOnly: TypedContractEvent<
      SetWhitelistOnlyEvent.InputTuple,
      SetWhitelistOnlyEvent.OutputTuple,
      SetWhitelistOnlyEvent.OutputObject
    >;

    "Success(uint256,uint256,address,address,uint256)": TypedContractEvent<
      SuccessEvent.InputTuple,
      SuccessEvent.OutputTuple,
      SuccessEvent.OutputObject
    >;
    Success: TypedContractEvent<
      SuccessEvent.InputTuple,
      SuccessEvent.OutputTuple,
      SuccessEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
