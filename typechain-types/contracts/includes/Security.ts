/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SecurityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "INIT"
      | "PAUSED_UNTIL"
      | "WATCHERS"
      | "WATCHER_STATUS"
      | "addWatcher"
      | "owner"
      | "paused"
      | "removeWatcher"
      | "renounceOwnership"
      | "securityPause"
      | "securityUnpause"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddWatcher"
      | "OwnershipTransferred"
      | "Paused"
      | "RemoveWatcher"
      | "SecurityPause"
      | "SecurityUnpause"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "INIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PAUSED_UNTIL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WATCHERS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "WATCHER_STATUS",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addWatcher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWatcher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "securityPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "securityUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "INIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PAUSED_UNTIL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WATCHERS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WATCHER_STATUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addWatcher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "securityPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "securityUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AddWatcherEvent {
  export type InputTuple = [watcher: AddressLike];
  export type OutputTuple = [watcher: string];
  export interface OutputObject {
    watcher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveWatcherEvent {
  export type InputTuple = [watcher: AddressLike];
  export type OutputTuple = [watcher: string];
  export interface OutputObject {
    watcher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecurityPauseEvent {
  export type InputTuple = [watcher: AddressLike, pausedUntil: BigNumberish];
  export type OutputTuple = [watcher: string, pausedUntil: bigint];
  export interface OutputObject {
    watcher: string;
    pausedUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecurityUnpauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Security extends BaseContract {
  connect(runner?: ContractRunner | null): Security;
  waitForDeployment(): Promise<this>;

  interface: SecurityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  INIT: TypedContractMethod<[], [boolean], "view">;

  PAUSED_UNTIL: TypedContractMethod<[], [bigint], "view">;

  WATCHERS: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  WATCHER_STATUS: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  addWatcher: TypedContractMethod<
    [_watcher: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeWatcher: TypedContractMethod<
    [_watcher: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  securityPause: TypedContractMethod<[], [void], "nonpayable">;

  securityUnpause: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "INIT"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "PAUSED_UNTIL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WATCHERS"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "WATCHER_STATUS"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "addWatcher"
  ): TypedContractMethod<[_watcher: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeWatcher"
  ): TypedContractMethod<[_watcher: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "securityPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "securityUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AddWatcher"
  ): TypedContractEvent<
    AddWatcherEvent.InputTuple,
    AddWatcherEvent.OutputTuple,
    AddWatcherEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RemoveWatcher"
  ): TypedContractEvent<
    RemoveWatcherEvent.InputTuple,
    RemoveWatcherEvent.OutputTuple,
    RemoveWatcherEvent.OutputObject
  >;
  getEvent(
    key: "SecurityPause"
  ): TypedContractEvent<
    SecurityPauseEvent.InputTuple,
    SecurityPauseEvent.OutputTuple,
    SecurityPauseEvent.OutputObject
  >;
  getEvent(
    key: "SecurityUnpause"
  ): TypedContractEvent<
    SecurityUnpauseEvent.InputTuple,
    SecurityUnpauseEvent.OutputTuple,
    SecurityUnpauseEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AddWatcher(address)": TypedContractEvent<
      AddWatcherEvent.InputTuple,
      AddWatcherEvent.OutputTuple,
      AddWatcherEvent.OutputObject
    >;
    AddWatcher: TypedContractEvent<
      AddWatcherEvent.InputTuple,
      AddWatcherEvent.OutputTuple,
      AddWatcherEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RemoveWatcher(address)": TypedContractEvent<
      RemoveWatcherEvent.InputTuple,
      RemoveWatcherEvent.OutputTuple,
      RemoveWatcherEvent.OutputObject
    >;
    RemoveWatcher: TypedContractEvent<
      RemoveWatcherEvent.InputTuple,
      RemoveWatcherEvent.OutputTuple,
      RemoveWatcherEvent.OutputObject
    >;

    "SecurityPause(address,uint256)": TypedContractEvent<
      SecurityPauseEvent.InputTuple,
      SecurityPauseEvent.OutputTuple,
      SecurityPauseEvent.OutputObject
    >;
    SecurityPause: TypedContractEvent<
      SecurityPauseEvent.InputTuple,
      SecurityPauseEvent.OutputTuple,
      SecurityPauseEvent.OutputObject
    >;

    "SecurityUnpause()": TypedContractEvent<
      SecurityUnpauseEvent.InputTuple,
      SecurityUnpauseEvent.OutputTuple,
      SecurityUnpauseEvent.OutputObject
    >;
    SecurityUnpause: TypedContractEvent<
      SecurityUnpauseEvent.InputTuple,
      SecurityUnpauseEvent.OutputTuple,
      SecurityUnpauseEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
