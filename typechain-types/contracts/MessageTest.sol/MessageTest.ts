/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MessageTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ENDPOINTS"
      | "MESSAGEv3"
      | "RECEIVED"
      | "configure"
      | "messageProcess"
      | "owner"
      | "renounceOwnership"
      | "sendMessage"
      | "sendRevert"
      | "setExsig"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MessageProcessed" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ENDPOINTS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "MESSAGEv3", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "RECEIVED",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configure",
    values: [AddressLike, BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "messageProcess",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRevert",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExsig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ENDPOINTS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MESSAGEv3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RECEIVED", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configure", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendRevert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setExsig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace MessageProcessedEvent {
  export type InputTuple = [txId: BigNumberish, message: string];
  export type OutputTuple = [txId: bigint, message: string];
  export interface OutputObject {
    txId: bigint;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MessageTest extends BaseContract {
  connect(runner?: ContractRunner | null): MessageTest;
  waitForDeployment(): Promise<this>;

  interface: MessageTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ENDPOINTS: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  MESSAGEv3: TypedContractMethod<[], [string], "view">;

  RECEIVED: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  configure: TypedContractMethod<
    [_bridge: AddressLike, _chains: BigNumberish[], _addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  messageProcess: TypedContractMethod<
    [
      _txId: BigNumberish,
      _sourceChainId: BigNumberish,
      _sender: AddressLike,
      arg3: AddressLike,
      arg4: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sendMessage: TypedContractMethod<
    [_chainId: BigNumberish, _confirmations: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  sendRevert: TypedContractMethod<
    [_chainId: BigNumberish, _confirmations: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  setExsig: TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ENDPOINTS"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "MESSAGEv3"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "RECEIVED"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "configure"
  ): TypedContractMethod<
    [_bridge: AddressLike, _chains: BigNumberish[], _addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "messageProcess"
  ): TypedContractMethod<
    [
      _txId: BigNumberish,
      _sourceChainId: BigNumberish,
      _sender: AddressLike,
      arg3: AddressLike,
      arg4: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [_chainId: BigNumberish, _confirmations: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendRevert"
  ): TypedContractMethod<
    [_chainId: BigNumberish, _confirmations: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExsig"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "MessageProcessed"
  ): TypedContractEvent<
    MessageProcessedEvent.InputTuple,
    MessageProcessedEvent.OutputTuple,
    MessageProcessedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "MessageProcessed(uint256,string)": TypedContractEvent<
      MessageProcessedEvent.InputTuple,
      MessageProcessedEvent.OutputTuple,
      MessageProcessedEvent.OutputObject
    >;
    MessageProcessed: TypedContractEvent<
      MessageProcessedEvent.InputTuple,
      MessageProcessedEvent.OutputTuple,
      MessageProcessedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
