/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IMessageV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "bridgeEnabled"
      | "chainsig"
      | "customSourceFee"
      | "enabledChains"
      | "exsig"
      | "feeToken"
      | "feeTokenDecimals"
      | "maxgas"
      | "minFee"
      | "minTokenForChain"
      | "sendMessage"
      | "sendRequest"
      | "setExsig"
      | "setMaxfee"
      | "setMaxgas"
      | "takeFeesOffline"
      | "weth"
      | "whitelistOnly"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bridgeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainsig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "customSourceFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enabledChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exsig", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxgas", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "minFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minTokenForChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setExsig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxfee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxgas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeFeesOffline",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistOnly",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "bridgeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainsig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "customSourceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enabledChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exsig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxgas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minTokenForChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setExsig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMaxfee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMaxgas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeFeesOffline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistOnly",
    data: BytesLike
  ): Result;
}

export interface IMessageV3 extends BaseContract {
  connect(runner?: ContractRunner | null): IMessageV3;
  waitForDeployment(): Promise<this>;

  interface: IMessageV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bridgeEnabled: TypedContractMethod<[], [boolean], "view">;

  chainsig: TypedContractMethod<[], [string], "view">;

  customSourceFee: TypedContractMethod<[caller: AddressLike], [bigint], "view">;

  enabledChains: TypedContractMethod<
    [destChainId: BigNumberish],
    [boolean],
    "view"
  >;

  exsig: TypedContractMethod<[caller: AddressLike], [string], "view">;

  feeToken: TypedContractMethod<[], [string], "view">;

  feeTokenDecimals: TypedContractMethod<[], [bigint], "view">;

  maxgas: TypedContractMethod<[caller: AddressLike], [bigint], "view">;

  minFee: TypedContractMethod<[], [bigint], "view">;

  minTokenForChain: TypedContractMethod<
    [chainId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  sendMessage: TypedContractMethod<
    [
      recipient: AddressLike,
      chain: BigNumberish,
      data: BytesLike,
      confirmations: BigNumberish,
      express: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  sendRequest: TypedContractMethod<
    [
      recipient: AddressLike,
      chainId: BigNumberish,
      amount: BigNumberish,
      referrer: AddressLike,
      data: BytesLike,
      confirmations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  setExsig: TypedContractMethod<[signer: AddressLike], [void], "nonpayable">;

  setMaxfee: TypedContractMethod<[maxfee: BigNumberish], [void], "nonpayable">;

  setMaxgas: TypedContractMethod<[maxgas: BigNumberish], [void], "nonpayable">;

  takeFeesOffline: TypedContractMethod<[], [boolean], "view">;

  weth: TypedContractMethod<[], [string], "view">;

  whitelistOnly: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bridgeEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "chainsig"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "customSourceFee"
  ): TypedContractMethod<[caller: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "enabledChains"
  ): TypedContractMethod<[destChainId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "exsig"
  ): TypedContractMethod<[caller: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "feeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeTokenDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxgas"
  ): TypedContractMethod<[caller: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minTokenForChain"
  ): TypedContractMethod<[chainId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      chain: BigNumberish,
      data: BytesLike,
      confirmations: BigNumberish,
      express: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendRequest"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      chainId: BigNumberish,
      amount: BigNumberish,
      referrer: AddressLike,
      data: BytesLike,
      confirmations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExsig"
  ): TypedContractMethod<[signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxfee"
  ): TypedContractMethod<[maxfee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxgas"
  ): TypedContractMethod<[maxgas: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "takeFeesOffline"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "whitelistOnly"
  ): TypedContractMethod<[], [boolean], "view">;

  filters: {};
}
